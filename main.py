import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import time
import threading
from parse_uni_functions import *


BOT_TOKEN = '7791271285:AAFc44MUP0H8Si0b9GBf4NBSK-Cc8bPHwzk'
bot = telebot.TeleBot(BOT_TOKEN)

universities = {
    "HSE": ("–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏", parse_hse),
    "MIPT": ("–ú–§–¢–ò", parse_mipt),
    "MIREA": ("–ú–ò–†–≠–ê", parse_mirea),
    "MEPHI": ("–ú–ò–§–ò", parse_mephi),
    "MISIS": ("–ú–ò–°–∏–°", parse_misis),
    "MAI": ("–ú–ê–ò", parse_mai)}


user_subscriptions = {}  # user_id: set(—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤)
last_titles = {code: None for code in universities}


# –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
def get_keyboard(user_id):
    markup = InlineKeyboardMarkup()
    subs = user_subscriptions.get(user_id, set())
    for code, (name, _) in universities.items():
        if code in subs:
            status = "‚úÖ"
            subs.add(code)
            print(universities.items())
        else:
            status = "‚ùå"
            subs.discard(code)
        markup.add(InlineKeyboardButton(f"{status} {name}", callback_data=code))
        print(subs)
    return markup


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_subscriptions.setdefault(user_id, set())
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –í–£–ó—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=get_keyboard(user_id))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    code = call.data
    subs = user_subscriptions.setdefault(user_id, set())
    if code in subs:
        subs.remove(code)
    else:
        subs.add(code)
    bot.edit_message_reply_markup(user_id, call.message.message_id, reply_markup=get_keyboard(user_id))


# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def check_news_loop():
    while True:
        for code, (name, parser) in universities.items():
            try:
                title, link = parser()
                last_titles = {code: None for code in universities} # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –Ω–æ–≤–∞—è
                if last_titles[code] != title:
                    last_titles[code] = title
                    message = f"üÜï –ù–æ–≤–æ—Å—Ç—å –∏–∑ {name}:\n<b>{title}</b>\nüóìüîó {link}" # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
                    for user_id, subs in user_subscriptions.items():
                        if code in subs:
                            try:
                                bot.send_message(user_id, message, parse_mode="HTML")
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
            except Exception as e:
                print(f"[{code}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        time.sleep(10)  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        print('ok')


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
threading.Thread(target=check_news_loop, daemon=True).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.infinity_polling()
