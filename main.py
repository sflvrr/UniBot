import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import time
import threading
from parse_uni_functions import *
import random


BOT_TOKEN = '7973736093:AAEaVvXexnejqMD-mcgDmakkAikghmbsQ8Q'
bot = telebot.TeleBot(BOT_TOKEN)

universities = {  # –°–ø–∏—Å–æ–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
    "HSE": ("–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏", parse_hse),
    "MIPT": ("–ú–§–¢–ò", parse_mipt),
    "MIREA": ("–ú–ò–†–≠–ê", parse_mirea),
    "MEPHI": ("–ú–ò–§–ò", parse_mephi),
    "MISIS": ("–ú–ò–°–∏–°", parse_misis),
    "MAI": ("–ú–ê–ò", parse_mai)}


error_messages = ["–ö —Ç–∞–∫–æ–º—É –º–µ–Ω—è –∂–∏–∑–Ω—å –Ω–µ –≥–æ—Ç–æ–≤–∏–ª–∞...", '–ò–∑–≤–∏–Ω–∏, –Ω–æ —ç—Ç–æ —É–∂–µ —Å–ª–∏—à–∫–æ–º...',
                  '–û—à–∏–±–∫–∞! –ú–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–µ—Ä–µ–≥—Ä–µ–ª—Å—è! –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.', '–Ø —á—Ç–æ-—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–µ–±—è –ø–æ–Ω—è–ª...']
user_subscriptions = {}  # user_id: set(—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤)
last_titles = {code: [] for code in universities}
proposal = False
admin = '1700868755'


# –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
def get_keyboard(user_id):
    markup = InlineKeyboardMarkup()
    subs = user_subscriptions.get(user_id, set())
    for code, (name, _) in universities.items():
        if code in subs:
            status = "‚úÖ"
            subs.add(code)
            print(universities.items())
        else:
            status = "‚ùå"
            subs.discard(code)
        markup.add(InlineKeyboardButton(f"{status} {name}", callback_data=code))
        print(subs)
    return markup


def send_main_menu(chat_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã"))
    markup.add(KeyboardButton("–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã"))
    markup.add(KeyboardButton("–û–ª–∏–º–ø–∏–∞–¥—ã"))
    markup.add(KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é"))
    bot.send_message(chat_id, "–í–æ—Ç –º–µ–Ω—é üëá", reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'menu'])
def send_welcome(message):
    send_main_menu(message.chat.id)


@bot.message_handler(content_types=['text'])
def func(message):
    global proposal
    if message.text == "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã":
        send_unis(message)

    elif message.text == "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã":
        bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å! :) \n"
                                          "–ú—ã —Ç—Ä—É–¥–∏–º—Å—è –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã—Å—Ç—Ä–µ–µ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!")

    elif message.text == "–û–ª–∏–º–ø–∏–∞–¥—ã":
        bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å! :) \n"
                                          "–ú—ã —Ç—Ä—É–¥–∏–º—Å—è –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã—Å—Ç—Ä–µ–µ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!")

    elif message.text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é":
        propose_function(message)

    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        send_main_menu(message.chat.id)

    else:
        if proposal:
            send_admin(message)
            proposal = False
        else:
            bot.send_message(message.chat.id, text=random.choice(error_messages))


def send_unis(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    back = KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(back)
    bot.send_message(message.chat.id, text="–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏ —Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=markup)
    user_id = message.from_user.id
    user_subscriptions.setdefault(user_id, set())
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –í–£–ó—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=get_keyboard(user_id))


def propose_function(message):
    global proposal
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    back = KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(back)
    bot.send_message(message.chat.id, text="–Ø –æ—Ç–∫—Ä—ã—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)
    proposal = True


def send_admin(message):
    print('forward_adm')
    print(message.chat.id)
    bot.send_message(admin, '{}'.format(message.text) + '\n\nuser id: ' + str(message.chat.id))
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"
                                      " –∏ –æ–Ω–∏ —É–∂–µ –¥—É–º–∞—é—Ç –Ω–∞–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π...")
    send_main_menu(message.chat.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    code = call.data
    subs = user_subscriptions.setdefault(user_id, set())
    if code in subs:
        subs.remove(code)
    else:
        subs.add(code)
    bot.edit_message_reply_markup(user_id, call.message.message_id, reply_markup=get_keyboard(user_id))


# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def check_news_loop():
    while True:
        for code, (name, parser) in universities.items():
            try:
                title, link = parser()
                if title not in last_titles[code]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –Ω–æ–≤–∞—è
                    last_titles[code].append(title)
                    if len(last_titles[code]) > 10:  # –î–µ—Ä–∂–∏–º –≤ –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π –í–£–ó–∞
                        last_titles[code].pop(0)
                    message = f"üÜï –ù–æ–≤–æ—Å—Ç—å –∏–∑ {name}:\n<b>{title}</b>\nüóìüîó {link}"  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
                    for user_id, subs in user_subscriptions.items():
                        if code in subs:
                            try:
                                bot.send_message(user_id, message, parse_mode="HTML")
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
            except Exception as e:
                print(f"[{code}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        time.sleep(900)  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        print('ok')


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
threading.Thread(target=check_news_loop, daemon=True).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.infinity_polling()
